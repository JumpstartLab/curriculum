
<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta charset="utf-8">
  <title>Experimenting with Draper - Jumpstart Lab Curriculum</title>
  <meta name="author" content="Jumpstart Lab">

  
  <meta name="description" content="            Experimenting with Draper          Let&#8217;s play around with the concept of decorators and check out some of the features offered by...">
  

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://yoursite.com/topics/decorators.markdown.orig">
  <link href="/favicon.png" rel="icon">
  <link href="/stylesheets/screen.css" media="screen, projection, print" rel="stylesheet" type="text/css">
  <script src="/javascripts/modernizr-2.0.js"></script>
  <script src="http://s3.amazonaws.com/ender-js/jeesh.min.js"></script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>
  <link href="/atom.xml" rel="alternate" title="Jumpstart Lab Curriculum" type="application/atom+xml">
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js" type="text/javascript"></script>
  <script src="http://tab-slide-out.googlecode.com/files/jquery.tabSlideOut.v1.3.js"></script>

  <script type="text/javascript">
    $(function(){
        $('.slide-out-div').tabSlideOut({
          tabHandle: '.handle',                     //class of the element that will become your tab
          pathToTabImage: 'images/contact_tab.gif', //path to the image for the tab //Optionally can be set using css
          imageHeight: '122px',                     //height of tab image           //Optionally can be set using css
          imageWidth: '40px',                       //width of tab image            //Optionally can be set using css
          tabLocation: 'left',                      //side of screen where tab lives, top, right, bottom, or left
          speed: 300,                               //speed of animation
          action: 'click',                          //options: 'click' or 'hover', action to trigger animation
          topPos: '200px',                          //position from the top/ use if tabLocation is left or right
          leftPos: '20px',                          //position from left/ use if tabLocation is bottom or top
          fixedPosition: false                      //options: true makes it stick(fixed position) on scroll
          });

        });

    </script>

  <!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
<link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">

</head>

<body  >
  <header role="banner"><hgroup>
  <h1><a href="/">Jumpstart Lab Curriculum</a></h1>
  
</hgroup>

</header>
  <nav role="navigation"><ul class="subscription" data-subscription="rss">
  <li><a href="/atom.xml" rel="subscribe-rss" title="subscribe via RSS">RSS</a></li>
  
</ul>
<form action="http://google.com/search" method="get">
  <fieldset role="search">
    <input type="hidden" name="q" value="site:yoursite.com" />
    <input class="search" type="text" name="q" results="0" placeholder="Search"/>
  </fieldset>
</form>
<ul class="main-navigation">
  <li><a href="/">Curriculum Index</a></li>
</ul>

</nav>
  <div id="main">
    <div id="content">
      <div>
<article role="article">
  
  <header>
    
    <h1 class="entry-title">Experimenting with Draper</h1>
    
  </header>
  
  Let&#8217;s play around with the concept of decorators and check out some of the features offered by the Draper gem.

<div class="note">
<p>This tutorial is open source. Please contribute fixes or additions to <a href="https://github.com/JumpstartLab/curriculum/blob/master/source/topics/decorators.markdown">the markdown source on Github.</a></p>
</div>

### Setup

<div class="note">
  <p>Get the JSBlogger project from Github:</p>
  <p><code>git clone git://github.com/JumpstartLab/jsblogger_advanced.git</code></p>
  <p>Once checked out, run each of the following:</p>
  <p><code>bundle</code></p>
  <p><code>rake db:setup</code></p>
  <p><code>rake</code></p>
  <p>All tests should pass.</p>
</div>


### Install Draper

Next, open the `Gemfile` and add a dependency on `&#8217;draper&#8217;` like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;draper&#39;</span>
</span></code></pre></td></tr></table></div></figure>

Run `bundle`, then start up your server.

### Generate a Decorator

We&#8217;ll create a decorator to wrap the `Article` model. Draper gives you a handy generator:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  rails generate draper:decorator Article</span></code></pre></td></tr></table></div></figure>

It will create the folder `app/decorators/` and the file `app/decorators/article_decorator.rb`. Open the file and you&#8217;ll find the frame of a `ArticleDecorator` class.

*Restart* your server so the new folder is added to the load path.

### First Usage

Without adding anything to the decorator, let&#8217;s see the simplest usage. Open the `articles_controller` and look at the `show` action. It currently has:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

To make use of the decorator, call the `.new` method and pass in the Article from the database:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">source</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@article</span> <span class="o">=</span> <span class="no">ArticleDecorator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Then go and view the show page for a single Article by clicking on its name on the index.

### Adding Methods

Now let&#8217;s add some actual functionality to our decorator.

#### Article Published On

Currently the show page just displays the raw `created_at` attribute. Often we want to standardize date formatting across our application, and the decorator makes this easy.

Let&#8217;s override the `created_at` method in our decorator:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">created_at</span>
</span><span class='line'>    <span class="n">article</span><span class="o">.</span><span class="n">created_at</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%m/%d/%y - %H:%M&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Since the decorator knows that it is decorating an instance of `Article`, it dynamically generates a method named `article` which returns the wrapped object. Here, calling `article.created_at` gets us the value from the original database model.

Refresh the `show` in your browser and the date will be reformatted.

#### Comment Counter

Currently the show page uses the `pluralize` helper:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;&lt;%=</span> <span class="n">pluralize</span> <span class="vi">@article</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;Comment&quot;</span> <span class="sx">%&gt;&lt;/h3&gt;</span>
</span></code></pre></td></tr></table></div></figure>

That&#8217;s a Law of Demeter violation right away, and it isn&#8217;t setup for future internationalization. We can pull the functionality into the decorator by adding a method:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">comments_count</span>
</span><span class='line'>  <span class="n">h</span><span class="o">.</span><span class="n">pluralize</span> <span class="n">article</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">&quot;Comment&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Then in the view template:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">  &lt;h3&gt;</span><span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="o">.</span><span class="n">comments_count</span> <span class="cp">%&gt;</span><span class="x">&lt;h3&gt;</span>
</span></code></pre></td></tr></table></div></figure>

#### Dealing with a Collection

If you look in the `index.html.erb`, you&#8217;ll see a similar `pluralize` line. Can you just reuse the decorator method? Try calling the `.comments_count` method.

We need the article objects to be decorated in the controller. In your `index` action you have:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@articles</span><span class="p">,</span> <span class="vi">@tag</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">search_by_tag_name</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:tag</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Let&#8217;s tweak it a bit to decorate the collection:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">articles</span><span class="p">,</span> <span class="vi">@tag</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">search_by_tag_name</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:tag</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@articles</span> <span class="o">=</span> <span class="no">ArticleDecorator</span><span class="o">.</span><span class="n">decorate</span><span class="p">(</span><span class="n">articles</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Now all elements of the collection are decorated and our index should work properly.

The original Demeter violation is *still there*, but now it can be cleaned in just one spot &#8211; by adding a counter cache column to the `articles` table and accessing the cache in the decorator.


### Using Allows

When we define an interface, we want to be able to exclude or include specific accessors. With Draper decorators, we can do this with `denies` and `allows`. The `allows` is more common, so let&#8217;s try it.

In your browser, load the `show` page for an article. In the decorator, add this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">allows</span> <span class="ss">:title</span>
</span></code></pre></td></tr></table></div></figure>

Then refresh the page. It should blow up.

`allows` is modeled after `attr_accessible` in Rails. If your decorator calls `allows`, then all methods _not_ listed are denied. This is a whitelist approach.

#### Allowing More Methods

So far you&#8217;re only allowing `:title`, so you&#8217;ll get exceptions as the other accessors try to pull out data. Add the needed methods to `allows`, separated by commas. Make sure you include `to_param` so your links will work properly.

Note that if you don&#8217;t use `allows` at all, everything is permitted.

### Links

I hate writing delete links. In the `show.html.erb`, I&#8217;m using a helper to generate the link with icon:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">delete_icon</span><span class="p">(</span><span class="vi">@article</span><span class="p">,</span> <span class="s2">&quot;Delete&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

Which calls this helper in `IconsHelper`: 

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">delete_icon</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">link_text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delete_icon_filename</span> <span class="o">=</span> <span class="s1">&#39;cancel.png&#39;</span>
</span><span class='line'>    <span class="n">link_to</span> <span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">polymorphic_path</span><span class="p">(</span><span class="n">object</span><span class="p">),</span>
</span><span class='line'>            <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">object</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

It works fine and wraps up some of the ugliness, but using the helper is a procedural approach. The decorator allows us to be object-oriented.

#### Writing the Decorator Method

To rework this helper, let&#8217;s start by just dropping the helper method into our decorator class

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticleDecorator</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_icon</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">link_text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delete_icon_filename</span> <span class="o">=</span> <span class="s1">&#39;cancel.png&#39;</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="no">HEAD</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="n">link_to</span> <span class="n">h</span><span class="o">.</span><span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>              <span class="n">h</span><span class="o">.</span><span class="n">polymorphic_path</span><span class="p">(</span><span class="n">object</span><span class="p">),</span>
</span><span class='line'>              <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">object</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'>    <span class="n">link_to</span> <span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">polymorphic_path</span><span class="p">(</span><span class="n">object</span><span class="p">),</span>
</span><span class='line'>            <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">object</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="mi">726</span><span class="n">ac13c0627fccb9d4ccb8c0698185cc0ab483d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

We don&#8217;t need to pass in the `object` parameter because the decorator will already know it&#8217;s `article`. We can write this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticleDecorator</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_icon</span><span class="p">(</span><span class="n">link_text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delete_icon_filename</span> <span class="o">=</span> <span class="s1">&#39;cancel.png&#39;</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="no">HEAD</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="n">link_to</span> <span class="n">h</span><span class="o">.</span><span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>              <span class="n">h</span><span class="o">.</span><span class="n">polymorphic_path</span><span class="p">(</span><span class="n">article</span><span class="p">),</span>
</span><span class='line'>              <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">article</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'>    <span class="n">link_to</span> <span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">polymorphic_path</span><span class="p">(</span><span class="n">article</span><span class="p">),</span>
</span><span class='line'>            <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">article</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="mi">726</span><span class="n">ac13c0627fccb9d4ccb8c0698185cc0ab483d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Note how `object` became `article`.

#### In the Show Template

Originally, we used a procedural-style helper method:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">delete_icon</span><span class="p">(</span><span class="vi">@article</span><span class="p">,</span> <span class="s2">&quot;Delete&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

Now we can use the decorator method:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="vi">@article</span><span class="o">.</span><span class="n">delete_icon</span><span class="p">(</span><span class="s2">&quot;Delete&quot;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

Cool? Pointless? You be the judge.

### Abstracting Decorators

In the conversion from Helper to Decorator in the last section, something was lost. The helper method worked on any object passed in, the decorator method belonged to the `ArticleDecorator`. We definitely don&#8217;t want to re-implement this code in multiple decorators, so how can we make it shareable?

#### `ApplicationDecorator.rb`

Approach one is to open `app/decorators/application_decorator.rb` and move the method in there:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationDecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_icon</span><span class="p">(</span><span class="n">link_text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delete_icon_filename</span> <span class="o">=</span> <span class="s1">&#39;cancel.png&#39;</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="no">HEAD</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="n">link_to</span> <span class="n">h</span><span class="o">.</span><span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>              <span class="n">h</span><span class="o">.</span><span class="n">polymorphic_path</span><span class="p">(</span><span class="n">article</span><span class="p">),</span>
</span><span class='line'>              <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">article</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'>    <span class="n">link_to</span> <span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">polymorphic_path</span><span class="p">(</span><span class="n">article</span><span class="p">),</span>
</span><span class='line'>            <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">article</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="mi">726</span><span class="n">ac13c0627fccb9d4ccb8c0698185cc0ab483d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

It&#8217;ll work for what we have so far, but if we try and use this from a `CommentDecorator`, it&#8217;s going to blow up because of the call to `article`.

Draper provides a generic way to access the wrapped object &#8211; the `model` method. Just change `article` to `model` and we&#8217;re good to go:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationDecorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_icon</span><span class="p">(</span><span class="n">link_text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delete_icon_filename</span> <span class="o">=</span> <span class="s1">&#39;cancel.png&#39;</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="no">HEAD</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="n">link_to</span> <span class="n">h</span><span class="o">.</span><span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>              <span class="n">h</span><span class="o">.</span><span class="n">polymorphic_path</span><span class="p">(</span><span class="n">model</span><span class="p">),</span>
</span><span class='line'>              <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'>    <span class="n">link_to</span> <span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">polymorphic_path</span><span class="p">(</span><span class="n">model</span><span class="p">),</span>
</span><span class='line'>            <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="mi">726</span><span class="n">ac13c0627fccb9d4ccb8c0698185cc0ab483d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

The main downside to this approach is that every decorator in the system is going to have this method. What if some decorators need a different style of delete icon?

#### The Module Approach

One of the limitations of helpers is that they all live in the same name space. You can&#8217;t have two different implementations of a `delete_icon` helper.

But since decorators are objects, that&#8217;s not an issue. We can use modules and mix them into the decorator classes.

For instance, we can create `app/decorators/icon_link_decorations.rb` and define this module:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">IconLinkDecorations</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_icon</span><span class="p">(</span><span class="n">link_text</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delete_icon_filename</span> <span class="o">=</span> <span class="s1">&#39;cancel.png&#39;</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="no">HEAD</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="n">link_to</span> <span class="n">h</span><span class="o">.</span><span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>              <span class="n">h</span><span class="o">.</span><span class="n">polymorphic_path</span><span class="p">(</span><span class="n">model</span><span class="p">),</span>
</span><span class='line'>              <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'>    <span class="n">link_to</span> <span class="n">image_tag</span><span class="p">(</span><span class="n">delete_icon_filename</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">link_text</span><span class="p">,</span>
</span><span class='line'>            <span class="n">polymorphic_path</span><span class="p">(</span><span class="n">model</span><span class="p">),</span>
</span><span class='line'>            <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:delete</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="s2">&quot;Delete &#39;</span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2">&#39;?&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="mi">726</span><span class="n">ac13c0627fccb9d4ccb8c0698185cc0ab483d</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Remove the similar code from the `ApplicationDecorator`, and `include` the module from the `ArticleDecorator`:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticleDecorator</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">IconLinkDecorations</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

Any other decorators that want to use that method can similarly include the module.

### Now, Play!

Those are the fundamental ideas, now you should try things on your own. Here are a few ideas:

#### More Links

Steve Klabnik wrote an example of implementing HATEOAS in his article here: http://blog.steveklabnik.com/posts/2012-01-06-implementing-hateoas-with-presenters

The resulting HTML looks like this:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>Links<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://localhost:3000/posts/1&quot;</span> <span class="na">rel=</span><span class="s">&quot;self&quot;</span><span class="nt">&gt;</span>This post<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://localhost:3000/posts&quot;</span> <span class="na">rel=</span><span class="s">&quot;index&quot;</span><span class="nt">&gt;</span>All posts<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>

Going a step further than Steve&#8217;s approach:

* Implement an `.index_link` presenter method that output the HTML link with the REL attribute set to `&#8221;index&#8221;`
* Implement a `.link` presenter method that outputs a link to the article, but sets the REL to `&#8221;self&#8221;` if the app is currently on that article&#8217;s show page. If it&#8217;s called from the index page, make the REL `&#8221;article_1&#8221;` with the correct ID
* Can you abstract this into a module such that it could be included in a `CommentPresenter` and work for both? Try it.

#### Controlling Marshalling

We need `to_json` and `to_xml` operations to present an API. They&#8217;re often implemented in the model, but they really belong in the view layer in the decorator.

* Implement a `to_json` method in the decorator that just calls the `ActiveRecord` method

Beyond that, it would be great to scope the JSON based on the current user. Since we don&#8217;t have an authentication/authorization setup, we&#8217;ll fake it using a request parameter.

* Define two constants:
  * `PUBLIC_ATTRIBUTES` as an array containing symbols for the `title`, `body`, and `created_at`
  * `ADMIN_ATTRIBUTES` as an array containing everything from `PUBLIC_ATTRIBUTES`, plus `updated_at`
* Manually add a parameter to your request URL with `admin=true`
* Write a `current_user_is_admin?` method in your `ApplicationHelper` which returns true if that parameter is set to `&#8221;true&#8221;`
* Call that helper method (using `h.current_user_is_admin?`) in your decorator.
  * When the user is an admin, show them the values specified by `ADMIN_ATTRIBUTES`
  * When the user is not an admin, show them only the values specified by `PUBLIC_ATTRIBUTES`

If you want to play more with marshalling, what would it be like to create decendents of your `ArticleDecorator` like `ArticleDecoratorXML` and `ArticleDecoratorJSON`? What functionality could you add which would allow the user to stay in the &#8220;duck typing&#8221; mindset, calling the same method on an instance of any of the three decorators but getting back HTML, XML, or JSON?

### Moving Forward with Decorators

The concept of Draper is still young. Please try it out on your projects and give us feedback at https://github.com/jcasimir/draper. Thanks!
  
    <footer>
      
      
        <div class="sharing">
  
  
</div>

      
    </footer>
  
</article>

</div>

<aside class="sidebar">
  
    <section>
  <h1>Recent Posts</h1>
  <ul id="recent_posts">
    
  </ul>
</section>





  
</aside>


    </div>
  </div>
  <footer role="contentinfo"><p>
  Copyright &copy; 2012 - Jumpstart Lab -
  <span class="credit">Powered by <a href="http://octopress.org">Octopress</a></span>
</p>

</footer>
  


  

  

  

  <div class="slide-out-div">
    <a class="handle" href="#">Content</a>
    <h3>Have feedback?</h3>
    <p>Thanks for letting us know! There's two ways to give us feedback:</p>
    <ul>
      <li>If you're on GitHub, you can <a href="https://github.com/JumpstartLab/curriculum/tree/master/source/projects">check out the source code</a>. This is all open source!</li>
      <li>If you don't have a GitHub account, you can <a href="mailto:jeff@jumpstartlab.com">send an email to Jeff</a>, and he'll be more than happy to address your issue.</li>
    </ul>
    <p>Thanks!</p>
  </div>
</body>
</html>
